/*	Execução dos algoritmos testes para o Compilador
	LabSO - PC1
    Lucas Bicalho
*/

/*Calculadora*/

void main(void){
    int a; int b; int op;
    a = input(); b = input(); op = input();

    if (op == 1){ 
        output(a+b);
    }
    if (op == 2){ 
        output(a-b);
    }
    if (op == 3){ 
        output(a*b);
    }
    if (op == 4){ 
        output(a/b);
    }
    if (op == 5){ 
        output(a-a/b*b); /* mod(a,b) */
    }
    if (op == 6){ 
        output(a*b/100); /* porcentagem(a,b) */
    }

}   

********** Codigo binario **********

instrucoes[0] = 32'b001010_00000000000000000000000001;          //Jump to Main
instrucoes[1] = 32'b000001_00000_00011_0000000000000011;        //addi
instrucoes[2] = 32'b010001_10101_000000000000000000000;         //in
instrucoes[3] = 32'b001110_00011_10101_0000000000000010;        //str
instrucoes[4] = 32'b010010_10101_000000000000000000000;        //out
instrucoes[5] = 32'b010001_10110_000000000000000000000;         //in
instrucoes[6] = 32'b001110_00011_10110_0000000000000011;        //str
instrucoes[7] = 32'b010010_10110_000000000000000000001;        //out
instrucoes[8] = 32'b010001_10111_000000000000000000000;         //in
instrucoes[9] = 32'b001110_00011_10111_0000000000000100;        //str
instrucoes[10] = 32'b010010_10111_000000000000000000010;        //out
instrucoes[11] = 32'b001101_00011_01011_0000000000000100;        //load
instrucoes[12] = 32'b001111_00000_11000_0000000000000001;        //li
instrucoes[13] = 32'b001101_00011_01100_0000000000000010;       //load
instrucoes[14] = 32'b001101_00011_01101_0000000000000011;       //load
instrucoes[15] = 32'b000110_01011_11000_0000000000010010;       //beq
instrucoes[16] = 32'b000000_01100_01101_11001_00000_000000;     //add
instrucoes[17] = 32'b010010_11001_000000000000000000010;        //out
instrucoes[18] = 32'b001111_00000_11010_0000000000000010;       //li
instrucoes[19] = 32'b000110_01011_11010_0000000000010110;       //beq
instrucoes[20] = 32'b000000_01100_01101_11011_00000_000001;     //sub
instrucoes[21] = 32'b010010_11011_000000000000000000010;        //out
instrucoes[22] = 32'b001111_00000_11100_0000000000000011;       //li
instrucoes[23] = 32'b000110_01011_11100_0000000000011010;       //beq
instrucoes[24] = 32'b000000_01100_01101_11101_00000_000010;     //mult
instrucoes[25] = 32'b010010_11101_000000000000000000010;        //out
instrucoes[26] = 32'b001111_00000_11110_0000000000000100;       //li
instrucoes[27] = 32'b000110_01011_11110_0000000000011110;       //beq
instrucoes[28] = 32'b000000_01100_01101_10101_00000_000011;     //div
instrucoes[29] = 32'b010010_10101_000000000000000000010;        //out
instrucoes[30] = 32'b001111_00000_10101_0000000000000101;       //li
instrucoes[31] = 32'b000110_01011_10101_0000000000100100;       //beq
instrucoes[32] = 32'b000000_01100_01101_10110_00000_000011;     //div
instrucoes[33] = 32'b000000_10110_01101_10111_00000_000010;     //mult
instrucoes[34] = 32'b000000_01100_10111_11000_00000_000001;     //sub
instrucoes[35] = 32'b010010_11000_000000000000000000010;        //out
instrucoes[36] = 32'b001111_00000_11001_0000000000000110;       //li
instrucoes[37] = 32'b000101_01011_11001_0000000000101001;       //beq
instrucoes[38] = 32'b000000_01100_01101_11010_00000_000010;     //mult
instrucoes[39] = 32'b000000_11010_11011_0000000001100100;       //inc
instrucoes[40] = 32'b010010_11011_000000000000000000000;        //out
instrucoes[41] = 32'b111111_00000000000000000000000000;         //halt

//Fibonacci

void main(void)
{
  /*Declaracao de variaveis.*/
  int a; int b; int auxiliar; int i; int n;
 
  /*Aqui foi necessario atribuir valores as variaveis a e b.*/
  a = 0;
  b = 1;
  i = 0;
 
  n = input();

  output(n);
 
  /*Com a estrutura de controle while() gero a sequencia.*/
  while(i < n){
    auxiliar = a + b;
    a = b;
    b = auxiliar;
    i = i + 1;
    output(auxiliar);
  }
}

********** Codigo binario **********

instrucoes[0] = 32'b001010_00000000000000000000000001;          // Jump to Main
instrucoes[1] = 32'b000001_00000_00011_0000000000000011;        //addi
instrucoes[2] = 32'b001111_00000_10101_0000000000000000;        //li
instrucoes[3] = 32'b001110_00011_10101_0000000000000010;        //str
instrucoes[4] = 32'b001111_00000_10110_0000000000000001;        //li
instrucoes[5] = 32'b001110_00011_10110_0000000000000011;        //str
instrucoes[6] = 32'b001111_00000_10111_0000000000000000;        //li
instrucoes[7] = 32'b001110_00011_10111_0000000000000101;        //str
instrucoes[8] = 32'b010001_11000_000000000000000000000;         //in
instrucoes[9] = 32'b001110_00011_11000_0000000000000110;        //str
instrucoes[10] = 32'b010010_11000_000000000000000000000;        //out
instrucoes[11] = 32'b001101_00011_01011_0000000000000101;       //load
instrucoes[12] = 32'b001101_00011_01100_0000000000000110;       //load
instrucoes[13] = 32'b000101_01011_01100_0000000000011001;       //ble
instrucoes[14] = 32'b001101_00011_01101_0000000000000010;       //load
instrucoes[15] = 32'b001101_00011_01110_0000000000000011;       //load
instrucoes[16] = 32'b000000_01101_01110_11001_00000_000000;     //add
instrucoes[17] = 32'b001110_00011_11001_0000000000000100;       //str
instrucoes[18] = 32'b001110_00011_01110_0000000000000010;       //str
instrucoes[19] = 32'b001101_00011_01111_0000000000000100;       //load
instrucoes[20] = 32'b001110_00011_01111_0000000000000011;       //str
instrucoes[21] = 32'b000001_01011_11010_0000000000000001;       //addi
instrucoes[22] = 32'b001110_00011_11010_0000000000000101;       //str
instrucoes[23] = 32'b010010_11001_000000000000000000010;        //out
instrucoes[24] = 32'b001010_00000000000000000000001011;         //jump
instrucoes[25] = 32'b111111_00000000000000000000000000;         //halt
